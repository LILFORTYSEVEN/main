import asyncio
from asyncio import exceptions
import aiogram
from aiogram import exceptions
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import state
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import config
from config import TOKEN, chat_id_to_forward, admins_id
from database import database_connect
import mysql.connector
import telebot

bot = telebot.TeleBot("6286125677:AAG_FPor6xFejfPNDqrz-H9PuKvYZTxJza4")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("CREATE TABLE IF NOT EXISTS customers (user_id INTEGER, first_name VARCHAR(255), last_name VARCHAR(255), "
                     "UNIQUE (user_id, first_name, last_name))")
    sql = "INSERT IGNORE INTO customers (user_id, first_name, last_name) VALUES (%s, %s, %s)"
    user_id = message.chat.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    val = (user_id, first_name, last_name)
    mycursor.execute(sql, val)
    mydb.commit()

    await message.answer_photo('https://avatars.mds.yandex.net/i?id=26a591ac65a79ae54d1245454dd586987266f988-9690504-images-thumbs&n=13')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    main = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    main.add(types.KeyboardButton('üíª –û—Ç–∫—Ä—ã—Ç—å –≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app=WebAppInfo(url='https://carych.ru/')))
    main.add(types.KeyboardButton('ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º'))

    await message.answer(f'üë§ {message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π CAR–´–ß!\n\n'
                         'üöô –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n'
                         '‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å.\n\n'
                         '–ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!\n\n'
                         '<i>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ ‚¨á</i>'
                         ''

                         , reply_markup=main, parse_mode="html")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º'
@dp.message_handler(text=['ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º'])
async def inline(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'))
    markup.add(types.KeyboardButton('üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'))
    markup.add(types.KeyboardButton('üë§ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'))
    markup.add(types.KeyboardButton('‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞'))
    markup.add(types.KeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏'))
    markup.add(types.KeyboardButton('üó∫ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤', web_app=WebAppInfo(url='https://yandex.ru/maps/54/yekaterinburg/?ll=60.526665%2C56.866304&mode=routes&rtext=~56.866362%2C60.526032&rtt=auto&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D14775371131&z=17.74',callback_data="5")))
    markup.add(types.KeyboardButton('üèÜ –û—Ç–∑—ã–≤—ã –∏ –æ—Ü–µ–Ω–∫–∏', web_app=WebAppInfo(url='https://yandex.ru/maps/org/karych/14775371131/reviews/?ll=60.525537%2C56.866539&utm_campaign=v1&utm_medium=rating&utm_source=badge&z=16', callback_data="6")))
    markup.add(types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥'))

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á:', reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
@dp.message_handler(text=['‚óÄ –ù–∞–∑–∞–¥'])
async def back(message: types.Message):
    await start(message)
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã—Ö–æ–¥' –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.message_handler(text=['‚óÄ –í—ã—Ö–æ–¥'])
async def back(message: types.Message):
    await start(message)


# –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
class OrderForm(StatesGroup):
    entering_product_name = State()
    entering_product_quantity = State()

@dp.message_handler(text=['üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'])
async def phone_number(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∑–∞–∫–∞–∑:')
    await OrderForm.entering_product_name.set()
    if message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)

@dp.message_handler(state=OrderForm.entering_product_name)
async def enter_product_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await state.update_data(product_name=message.text)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
    await OrderForm.entering_product_quantity.set()

    if message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)


@dp.message_handler(state=OrderForm.entering_product_quantity)
async def enter_product_quantity(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    await state.update_data(product_quantity=message.text)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_name = data.get('product_name')
    product_quantity = data.get('product_quantity')
    telegram_id = message.from_user.id
    customer_name = message.from_user.first_name
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    sql = "INSERT INTO orders (product_name, product_quantity, product_status, payment_status, TelegramID, CustomerName) VALUES (%s, %s, '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞', %s, %s)"
    values = (product_name, product_quantity, telegram_id, customer_name)
    mycursor.execute(sql, values)
    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mydb.commit()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    mycursor.execute("SELECT order_id FROM orders ORDER BY order_id DESC LIMIT 1")
    last_order_id = mycursor.fetchone()[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    await message.answer(f'‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!'
                         f'\n\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{last_order_id}</code>'
                         f'\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"'
                         f'\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ: \n/payment', parse_mode="html")
    if message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.reset_state()





class PhoneNumberState(StatesGroup):
    waiting_for_phone_number = State()

@dp.message_handler(text=['üì± –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É'])
async def phone_number(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É:'
                         '\n(<i>–ù–∞–ø—Ä–∏–º–µ—Ä: +78005553535</i>)', parse_mode='html')

    await PhoneNumberState.waiting_for_phone_number.set()


@dp.message_handler(state=PhoneNumberState.waiting_for_phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ telegram id
    user_id = message.from_user.id
    mydb = database_connect
    mycursor = mydb.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mycursor.execute("SELECT * FROM customers WHERE user_id=%s", (user_id,))
    user = mycursor.fetchone()

    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        # –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É phone
        mycursor.execute("UPDATE customers SET phone=%s WHERE user_id=%s", (phone_number, user_id))
        mydb.commit()

        await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'
@dp.message_handler(text=['üë§ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'])
async def support(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    markup.add(types.KeyboardButton('üì± –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É'))
    markup.add(types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥'))

    await message.answer('–î–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ ‚¨á', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    await message.answer(f'{message.from_user.full_name}, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')

    if message.forward_from is None:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        contact = message.contact

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_contact(chat_id=chat_id_to_forward, phone_number=contact.phone_number, first_name=contact.first_name,
                               last_name=contact.last_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/admin"
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if message.from_user.id == admins_id:
        # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("‚úâ –†–∞—Å—Å—ã–ª–∫–∞"))
        markup.add(types.KeyboardButton("üì¶ –°–∫–ª–∞–¥"))
        markup.add(types.KeyboardButton("üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"))
        markup.add(types.KeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤"))
        markup.add(types.KeyboardButton("üìù –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"))
        markup.add(types.KeyboardButton("‚óÄ –í—ã—Ö–æ–¥"))
        await message.reply("‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", reply_markup=markup)
    else:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!")


class DeleteState(StatesGroup):
    waiting_order_id = State()

@dp.message_handler(text=["üìù –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"])
async def stats(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:')
    await DeleteState.waiting_order_id.set()

@dp.message_handler(state=DeleteState.waiting_order_id)
async def process_order_id(message: types.Message, state: FSMContext):
    order_id = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π order_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT * FROM `orders` WHERE order_id = %s;", (order_id,))
    result = mycursor.fetchall()

    if len(result) > 0:
       # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º order_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
       mycursor.execute("DELETE FROM `orders` WHERE order_id = %s;", (order_id,))
       mydb.commit()

       await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!')

    else:
       await message.answer('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    await state.finish()


##################
@dp.message_handler(text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤")
async def stats(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT * FROM `orders`")
    orders = mycursor.fetchall()
    if len(orders) > 0:
        response = "üìù –í—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ:\n\n"
        for order in orders:
            response += f"üü¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order[0]}\n–¢–æ–≤–∞—Ä: {order[1]}\n–¶–µ–Ω–∞: {order[2]} —Ä—É–±–ª–µ–π\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[3]} —à—Ç \n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[4]} \n" \
                        f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {order[5]}\nTelegramID: {order[6]} \n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {order[7]}\n\n"
        await message.reply(response)
    else:
        await message.reply('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!')
    await state.finish()


class SearchState(StatesGroup):
    waiting_for_product_status_number = State()

class ChangeState(StatesGroup):
    waiting_for_order_id = State()
    waiting_for_product_status = State()

@dp.message_handler(text=["üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"])
async def stats(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞:')
    await ChangeState.waiting_for_order_id.set()

@dp.message_handler(state=ChangeState.waiting_for_order_id)
async def process_order_id(message: types.Message, state: FSMContext):
    order_id = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π order_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT * FROM `orders` WHERE order_id = %s;", (order_id,))
    result = mycursor.fetchall()

    if len(result) > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        await state.update_data(order_id=order_id)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞:')
        await ChangeState.waiting_for_product_status.set()
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')


@dp.message_handler(state=ChangeState.waiting_for_product_status)
async def process_product_status(message: types.Message, state: FSMContext):
    product_status = message.text

    # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()
    order_id = data.get('order_id')

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("UPDATE `orders` SET product_status = %s WHERE order_id = %s;", (product_status, order_id))
    mydb.commit()

    await message.answer('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
    await state.finish()



@dp.message_handler(text=["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def stats(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT COUNT(*) FROM customers")
    count = mycursor.fetchone()[0]
    mydb.commit()
    await message.reply(f'üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑—É—é—â–∏—Ö—Å—è –±–æ—Ç–æ–º: {count}')

    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT user_id, first_name, last_name, phone FROM `customers`")
    result = mycursor.fetchall()
    mydb.commit()
    if len(result) > 0:
        products_list = '\n\n'.join(
            [
                f'Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name[0]} \n–ò–º—è: {name[1]} \n–§–∞–º–∏–ª–∏—è: {name[2]} \n–¢–µ–ª–µ—Ñ–æ–Ω: {name[3]}'
                for name in
                result])
        await message.answer(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –±–æ—Ç–∞:\n\n{products_list}')
    else:
        await message.answer('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!')

@dp.message_handler(text=["üì¶ –°–∫–ª–∞–¥"])
async def stats(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT Name, Manufacturer, Quantity, Type, Price FROM `product`")
    result = mycursor.fetchall()
    mydb.commit()
    if len(result) > 0:
        products_list = '\n\n'.join(
            [f'{name[0]} \n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {name[1]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {name[2]}—à—Ç. \n–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {name[3]} \n–¶–µ–Ω–∞: {name[4]} —Ä—É–±–ª–µ–π' for name in
             result])
        await message.reply(f'–¢–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n{products_list}')
    else:
        await message.reply('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!')

class YourState(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.message_handler(text=['‚úâ –†–∞—Å—Å—ã–ª–∫–∞'])
async def send_message(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await YourState.waiting_for_message.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(state=YourState.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def process_send_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    text = message.text
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT user_id FROM customers")
    newslatter = [row[0] for row in mycursor.fetchall()]
    mydb.commit()

    for user_id in newslatter:
        try:
            await bot.send_message(user_id, text)
        except exceptions.ChatNotFound:
            print(f"–ß–∞—Ç —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")

    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

class SearchType(StatesGroup):
    waiting_for_product_type = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"
@dp.message_handler(text=['üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'])
async def search(message: types.Message):
    await message.answer('üîç–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:\n\n'
                         '(<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –°–≤–µ—á–∏, –ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ, –ê–Ω—Ç–∏—Ñ—Ä–∏–∑ –∏ —Ç.–¥.</i>)', parse_mode='html')
    await SearchType.waiting_for_product_type.set()

@dp.message_handler(state=SearchType.waiting_for_product_type, content_types=types.ContentTypes.TEXT)
async def process_send_message(message: types.Message, state: FSMContext):
    # –ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ
    if message.text == '–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ':
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
        mydb = database_connect
        mycursor = mydb.cursor()
        mycursor.execute("SELECT Name, Manufacturer, Quantity, Price FROM `product` WHERE Type = '–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ';")
        result = mycursor.fetchall()
        if len(result) > 0:
            products_list = '\n\n'.join([f'{name[0]} \n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {name[1]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {name[2]}—à—Ç. \n–¶–µ–Ω–∞: {name[3]} —Ä—É–±–ª–µ–π' for name in result])
            await message.reply(f'–¢–æ–≤–∞—Ä—ã —Å —Ç–∏–ø–æ–º "–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ":\n\n{products_list}')
            await state.finish()
        else:
            await message.reply('–¢–æ–≤–∞—Ä–æ–≤ —Å —Ç–∏–ø–æ–º "–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ" –Ω–µ—Ç!')
    # –ê–Ω—Ç–∏—Ñ—Ä–∏–∑
    elif message.text == '–ê–Ω—Ç–∏—Ñ—Ä–∏–∑':
        mydb = database_connect
        mycursor = mydb.cursor()
        mycursor.execute("SELECT Name, Manufacturer, Quantity, Price FROM `product` WHERE Type = '–ê–Ω—Ç–∏—Ñ—Ä–∏–∑';")
        result = mycursor.fetchall()
        if len(result) > 0:
            products_list = '\n\n'.join(
                [f'{name[0]} \n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {name[1]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {name[2]}—à—Ç. \n–¶–µ–Ω–∞: {name[3]} —Ä—É–±–ª–µ–π' for name in
                 result])
            await message.reply(f'–¢–æ–≤–∞—Ä—ã —Å —Ç–∏–ø–æ–º "–ê–Ω—Ç–∏—Ñ—Ä–∏–∑":\n\n{products_list}')
            await state.finish()
        else:
            await message.reply('–¢–æ–≤–∞—Ä–æ–≤ —Å —Ç–∏–ø–æ–º "–ê–Ω—Ç–∏—Ñ—Ä–∏–∑" –Ω–µ—Ç!')
    # ....
    # –°–≤–µ—á–∏
    elif message.text == '–°–≤–µ—á–∏':
        mydb = database_connect
        mycursor = mydb.cursor()
        mycursor.execute("SELECT Name, Manufacturer, Quantity, Price FROM `product` WHERE Type = '–°–≤–µ—á–∏';")
        result = mycursor.fetchall()
        if len(result) > 0:
            products_list = '\n\n'.join(
                [f'{name[0]} \n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {name[1]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {name[2]}—à—Ç. \n–¶–µ–Ω–∞: {name[3]} —Ä—É–±–ª–µ–π' for name in
                 result])
            await message.reply(f'–¢–æ–≤–∞—Ä—ã —Å —Ç–∏–ø–æ–º "–°–≤–µ—á–∏":\n\n{products_list}')
        else:
            await message.reply('–¢–æ–≤–∞—Ä–æ–≤ —Å —Ç–∏–ø–æ–º "–°–≤–µ—á–∏" –Ω–µ—Ç!')
    elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)
    else:
        await message.reply('–î–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!\n\n'
                            '–ù–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä? –ù–µ –±–µ–¥–∞!\n\n'
                            '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏: üë§ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.')

class CalculateState(StatesGroup):
    calculate_finish_price = State()

@dp.message_handler(text=['üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏'])
async def search(message: types.Message):
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.'
                         '\n\n(<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ASIA –†-–û–ê–¢ purple -36 1L, 8</i>)', parse_mode='html')
    await CalculateState.calculate_finish_price.set()




@dp.message_handler(state=CalculateState.calculate_finish_price, content_types=types.ContentTypes.TEXT)
async def process_send_message(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    product_info = message.text.split(',')
    product_name = product_info[0].strip()
    product_quantity = int(product_info[1].strip())
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute(
        f"SELECT Name, Price, Quantity, (Price * {product_quantity}) AS total FROM product WHERE Name = '{product_name}'")
    result = mycursor.fetchall()

    if len(result) > 0:
        products_list = '\n\n'.join(
            [f'{name[0]}  \n–¶–µ–Ω–∞: {name[1]} —Ä—É–±–ª–µ–π. \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_quantity} —à—Ç. \n–ò—Ç–æ–≥: {name[3]} —Ä—É–±–ª–µ–π.' for name in
             result])
        await message.reply(f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: \n\n{products_list}')
    if message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)
    else:
        await message.reply(f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è!')

    await state.finish()


class SearchState(StatesGroup):
    waiting_for_product_status_number = State()
#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(text=['‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞'])
async def get_data_from_db(message: types.Message):
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞:')
    await SearchState.waiting_for_product_status_number.set()

@dp.message_handler(state=SearchState.waiting_for_product_status_number, content_types=types.ContentTypes.TEXT)
async def process_send_message(message: types.Message, state: FSMContext):
    search_number = message.text
    mydb = database_connect
    mycursor = mydb.cursor()
    mycursor.execute("SELECT product_name, product_price, product_quantity, product_status FROM `orders` WHERE order_id = %s;", (search_number,))
    result = mycursor.fetchall()
    if len(result) > 0:
        products_list = '\n\n'.join(
            [f'{name[0]}  \n–¶–µ–Ω–∞: {name[1]} —Ä—É–±–ª–µ–π. \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {name[2]} —à—Ç. \n–°—Ç–∞—Ç—É—Å: {name[3]}'  for name in
             result])
        await message.reply(f'üì¶ –í–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {search_number}:\n\n{products_list}')
    elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
        await state.finish()
        await start(message)
    else:
        await message.reply(f'üì¶ –ó–∞–∫–∞–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º "{search_number}" –Ω–µ—Ç!')

    await state.finish()


async def check_order_status(bot):
    last_order_id = None

    while True:
        mydb = database_connect
        mycursor = mydb.cursor()

        mycursor.execute("SELECT * FROM orders WHERE order_id > %s ORDER BY order_id ASC", (last_order_id or 0,))
        result = mycursor.fetchall()
        mydb.commit()

        for order in result:
            order_id = order[1]
            product_status = order[2]
            telegram_id = order[3]

            if product_status == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
                await bot.send_message(chat_id=telegram_id,
                                       text=f"–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}")

            last_order_id = order_id

        mycursor.close()

        await asyncio.sleep(5)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(commands=['payment'])
async def payment_command(message: types.Message):
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:')

@dp.message_handler(regexp=r'^\d+$')
async def process_payment(message: types.Message):
    order_id = message.text
    mydb = database_connect
    cursor = mydb.cursor()
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    cursor.execute('SELECT product_price FROM orders WHERE order_id = %s', (order_id,))
    result = cursor.fetchone()
    mydb.commit()
    if result is None:
        await message.answer('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    else:
        product_price = result[0]
        await message.answer('‚ùó –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n'
                             '–ï—Å–ª–∏ –≤—ã —Å —á–µ–º-—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ "üë§ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"')
        if product_price > 0:
            await bot.send_invoice(
                chat_id=message.chat.id,
                title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                description=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}',
                payload='order_payload',
                provider_token=config.PAYMENT_TOKEN,
                start_parameter='optional',
                currency='RUB',
                prices=[
                    types.LabeledPrice(label='–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', amount=product_price)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                ]
            )
        else:
            await message.answer('–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ —Ä–∞–≤–Ω–æ–π –Ω—É–ª—é!')

@dp.pre_checkout_query_handler()
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout_query.id,
        ok=True
    )

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    order_id = message.text
    mydb = database_connect
    cursor = mydb.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É payment_status –≤ —Ç–∞–±–ª–∏—Ü–µ orders
    cursor.execute('UPDATE orders SET payment_status = "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω" WHERE order_id = %s', (order_id,))
    mydb.commit()
    await message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ ‚ù§')
dp.register_message_handler(payment_command, commands=['payment'])
dp.register_message_handler(process_payment)
dp.register_message_handler(successful_payment)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.message_handler(content_types=["audio", "document", "photo", "sticker", "video", "video_note", "voice", "location",
                "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
               "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                "migrate_from_chat_id", "pinned_message"])
async def error(message: types.Message):
   await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n"
                      "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ ‚¨á")


executor.start_polling(dp)

